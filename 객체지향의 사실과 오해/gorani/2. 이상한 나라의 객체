**객체**란 인지하고 구별할 수 있는 어떤 것이다.
객체는 **상태**, **행동**, **식별자를** 지닌 실체이다.
객체지향 패러다임의 목적은 현실 세계를 모방하는 것이 아니라 새로운 세계를 창조하는 것이다.

### 상태
**상태**를 결정하는 것은 **행동**이지만 행동의 결과를 결정하는 것은 상태이다. -> 행동의 결과는 상태에 **의존적**이다.
상태를 이용하면 과거에 얽매이지 않고 현재를 기반으로 객체의 행동방식을 이해할 수 있다.
상태를 구성하는 모든 특징을 객체의 **프로퍼티**(property)라고 한다.
- 프로퍼티 -> 정적 (ex. 엘리스의 키)
- 포로퍼티 값 -> 동적 (ex. 키의 수치)

객체와 객체 사이의 의미 있는 연결를 **링크**라고 한다.
링크는 한 객체가 **다른 객체의 식별자를 알고 있는 것**으로 표현된다.
객체를 구성하는 단순한 값은 **속성**이라고 한다.
> 객체의 **상태**는 객체에 존재하는 **정적**인 프로퍼티와 **동적**인 프로퍼티 값으로 구성된다.
객체의 프로퍼티는 단순한 값인 **속성**과 다른객체를 참조하는 **링크**로 구분할 수 있다.

### 행동
행동은 상태를 변경시킨다.
- 객체의 행동은 상태에 영향을 받는다.
- 객체의 행동은 상태를 변경시킨다.

행동은 **협력**에 참여할 수 있는 유일한 방법이다.
객체는 다른 객체와 **메시지**를 통해서만 의사소통할 수 있다.
행동의 결과로 객체는 자신의 **상태를 변경**하거나 다른 객체에게 **메시지를 전달**할 수 있다.

상태를 캡슐 안에 감춰둔 채 행동만 외부에 노출하는 것을 **캡슐화**라고 한다.
캡슐화를 통해 상태의 변경을 메시지 수신자의 자율적인 판단에 맡김으로써 **객체의 자율성을 높일** 수 있다. 이를 통해 **협력을 단순하고 유연**하게 만들 수 있다.

### 식별자
객체를 서로 구별할 수 있는 특정한 프로퍼티를 **식별자**라고 한다.

**객체**와 달리 **값**은 식별자를 가지지 않는다.
값(숫자, 문자역, 날짜 등)은 불변 상태를 가진다.(아마..1을 2라 말하지 않는 것처럼?)
상태를 이용해 두 값이 같은지 판단할 수 있는 성질을 **동등성**이라고 한다. -> 값이 같다면 동등한 상태를 유지할 것이다.

두 **객체**의 상태가 다르더라도 식별자를 기반으로 객체가 같은지를 판단할 수 있는 성질을 **동일성**이라고 한다.

객체: 참조 객체(reference object), 엔티티(entity)
값: 값 객체(value object)

객체의 상태를 조회하는 작업을 **쿼리**라 하고 상태를 변경하는 작업을 **명령**이라고 한다.

상태를 먼저 결정하고 행동을 나중에 결정하는 방법은 캡슐화를 저해하고 협력에 적합하지 못한 객체를 생성하며, 재사용성이 저하된다.

**책임-주도 설계**는 협력이라는 문맥 안에서 객체의 행동을 생각하도록 도움으로써 응집도 높고 재사용 가능한 객체를 만들 수 있게 한다.

현실 속의 수동적인 객체가 소프트웨어 객체로 구현될 때에 능동적으로 변하기도 하는데 이를 **의인화**라고 한다.
이러한 현실 세계화 객체지향 세계 사이의 관계를 **은유**로 설명할 수 있다.
은유를 효과적으로 사용할 경우 두 세계 사이의 표현적 차이를 줄여 이해하기 쉽고 유지보수가 용이한 소프트웨어를 만들 수 있다.
